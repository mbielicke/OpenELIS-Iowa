package org.openelis.scriptlet.ms.quad;

import org.openelis.constants.Messages;
import org.openelis.scriptlet.ms.Util;
import org.openelis.ui.common.DataBaseUtil;
import org.openelis.ui.common.Datetime;
import org.openelis.ui.common.InconsistencyException;

/**
 * The class that stores constants such as correction factors for MoM per test
 * and truncation limits for a specific maternal screen such as AFP; it also
 * stores other values such as the result generated by the intrument and
 * p-values etc.; it also computes the initial and current MoMs
 */
public abstract class Test {
    private Double  race, insuline, ntd[], downs[], t18[], slos[], momInit, momCurr, p1, p2, p3, result;
    private int     minDay, maxDay;
    private String analyteName;

    protected Test(Double race, Double insuline, Double ntd[], Double downs[], Double t18[],
                   Double slos[], int minDay, int maxDay, String analyteName) {
        this.race = race;
        this.insuline = insuline;
        this.ntd = ntd;
        this.downs = downs;
        this.t18 = t18;
        this.slos = slos;
        this.minDay = minDay;
        this.maxDay = maxDay;
        this.analyteName = analyteName;
    }
    
    /**
     * Sets p1
     */
    public void setP1(Double p1) {
        this.p1 = p1;
    }

    /**
     * Returns p2
     */
    public Double getP2() {
        return p2;
    }

    /**
     * Sets p2
     */
    public void setP2(Double p2) {
        this.p2 = p2;
    }
    
    /**
     * Sets p3
     */
    public void setP3(Double p3) {
        this.p3 = p3;
    }

    /**
     * Returns the final computed MoM to be shown to the user
     */
    public Double getMomFinal() {
        if (!didCmpMoM())
            return null;
        return momCurr;
    }
    
    /**
     * Sets the value from the intrument for this test
     */
    public void setResult(Double result) {
        this.result = result;
    }

    /**
     * Returns race correction factor for MoM
     */
    protected Double getRace() {
        return race;
    }

    /**
     * Returns insulin correction factor for MoM
     */
    protected Double getInsuline() {
        return insuline;
    }

    /**
     * Returns truncation limits for NTD
     */
    protected Double[] getNTD() {
        return ntd;
    }

    /**
     * Returns truncation limits for Downs
     */
    protected Double[] getDowns() {
        return downs;
    }

    /**
     * Returns truncation limits for T18
     */
    protected Double[] getT18() {
        return t18;
    }

    /**
     * Returns truncation limits for SLOS
     */
    protected Double[] getSLOS() {
        return slos;
    }

    /**
     * Returns min gestational age
     */
    protected int getMinDay() {
        return minDay;
    }

    /**
     * Returns max gestational age
     */
    protected int getMaxDay() {
        return maxDay;
    }

    /**
     * Returns the value from the intrument for this test
     */
    protected Double getResult() {
        return result;
    }

    /**
     * Returns p1
     */
    protected Double getP1() {
        return p1;
    }

    /**
     * Returns p3
     */
    protected Double getP3() {
        return p3;
    }
    
    /**
     * Returns the name of the analyte for this test such as "AFP"
     */
    protected String getAnalyteName() {
        return analyteName;
    }

    /**
     * Computes Multiple of Medians for the test
     */
    protected void computeMoms(int gestAgeInit, int gestAgeCurr, Datetime entered, Double weight,
                            boolean isRaceBlack, boolean isDiabetic) throws Exception {
        double mom;

        if (getResult() != null) {
            try {
                mom = getMoM(gestAgeInit, entered, weight, isRaceBlack, isDiabetic);
                setMomInit(Util.trunc(mom + 0.005, 2));
                mom = getMoM(gestAgeCurr, entered, weight, isRaceBlack, isDiabetic);
                setMomCurr(Util.trunc(mom + 0.005, 2));
            } catch (Exception indE) {
                setMomInit(null);
                setMomCurr(null);
                throw indE;
            }
        }
    }

    /**
     * Returns MoM computed using initial gestational age
     */
    protected Double getMomInit() {
        return momInit;
    }

    /**
     * Sets MoM computed using initial gestational age
     */
    protected void setMomInit(Double momInit) {
        this.momInit = momInit;
    }

    /**
     * Returns MoM computed using current gestational age
     */
    protected Double getMomCurr() {
        return momCurr;
    }

    /**
     * Sets MoM computed using current gestational age
     */
    protected void setMomCurr(Double momCurr) {
        this.momCurr = momCurr;
    }

    /**
     * Returns the weight adjustment factor for MoM
     */
    protected abstract double getAdjWeight(double w);

    /**
     * Returns the median computed based on the passed gestational age
     */
    protected abstract double getMedianforAge(int ga) throws Exception;    

    /**
     * Returns the error shown to the user when some of the p-values required
     * to compute the median for this test are missing
     */
    protected String getPValueError(String... pvals) {
        String pmsg;

        pmsg = null;
        for (String p : pvals)
            pmsg = DataBaseUtil.concatWithSeparator(pmsg, ", ", p);

        return Messages.get().result_pvaluesNotFoundException(pmsg, analyteName);
    }

    /**
     * Returns the computed MoM value after applying corrections
     */
    protected double getMoM(int ga, Datetime entered, Double weight, boolean isRaceBlack,
                          boolean isDiabetic) throws Exception {
        double mom, median, adjWeight, w;

        if (entered == null)
            throw new InconsistencyException(Messages.get().result_missingEnteredDateException());

        /*
         * the weight adjustment factor
         */
        if (weight == null) {
            adjWeight = 0.0;
        } else {
            w = Math.max(90.0, Math.min(350.0, weight.doubleValue()));
            adjWeight = getAdjWeight(w);
        }

        /*
         * the median for gestational age
         */
        if (ga < getMinDay() || ga > getMaxDay())
            median = 0.0;
        else
            median = getMedianforAge(ga);

        if (getResult() == null || getResult() == 0.0)
            throw new InconsistencyException(Messages.get().result_missingInvalidResultException(analyteName));
        if (adjWeight == 0.0)
            throw new InconsistencyException(Messages.get().result_missingMaternalWeightException());
        if (median == 0.0)
            throw new InconsistencyException(Messages.get().result_noMedianForGestAgeException(ga));

        mom = getResult() / median / adjWeight;
        if (isRaceBlack)
            mom /= getRace();
        if (isDiabetic)
            mom /= getInsuline();
        
        return mom;
    }
    
    /**
     * Returns true if the MoM was computed; returns false otherwise
     */
    protected boolean didCmpMoM() {
        return momCurr != null && momInit != null;
    }
}