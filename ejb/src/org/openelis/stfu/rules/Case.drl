package org.openelis.stfu.rules;

import org.openelis.stfu.scanner.ScannerRecord;
import org.openelis.manager.SampleManager1;
import org.openelis.manager.SampleManager1Accessor;
import org.openelis.domain.SampleNeonatalViewDO;
import org.openelis.stfu.manager.CaseManagerAccessor;
import org.openelis.stfu.manager.CaseManager;
import org.openelis.stfu.scanner.CaseFactory;
import java.util.ArrayList;
import java.util.HashMap;
import org.openelis.domain.TestDO;
import org.openelis.domain.DictionaryDO;
import org.openelis.domain.Constants;
import org.openelis.domain.AnalysisDO;

global HashMap<Integer,CaseManager> cases;

rule "transfused"
    when 
        $sr : ScannerRecord (isTransfused(getSampleManager()))
    then 
		createTag($sr.getSampleManager(),1,cases);
end

rule "early collection"
	when 
		$sr : ScannerRecord (isEarlyCollection(getSampleManager()))
	then 
		createTag($sr.getSampleManager(),10,cases);
end

rule "unknown weight"
	when 
	    $sr : ScannerRecord (isUnknownWeight(getSampleManager()))
	then 
	    createTag($sr.getSampleManager(),12,cases);
end

rule "poor quality"
	when 
		$sr : ScannerRecord (isPoorQuality(getSampleManager()))
	then 
		createTag($sr.getSampleManager(),11,cases);
end
		
rule "cah"
	when 
	    $sr : ScannerRecord (isCah(getTest()), isPositive(getInterpratation()))
	then
		createTag($sr.getSampleManager(),2,cases);
		retract($sr);
end

rule "bt"
	when 
		$sr : ScannerRecord (isBt(getTest()), isPositive(getInterpratation()))
	then 
		createTag($sr.getSampleManager(),3,cases);
		retract($sr);
end

rule "hb"
	when 
		$sr : ScannerRecord (isHb(getTest()), isPositive(getInterpratation()))
	then 
		createTag($sr.getSampleManager(),4,cases);
		retract($sr);
end

rule "cftr"
	when 
		$sr : ScannerRecord (isCFTR(getTest()), isPositive(getInterpratation()))
	then 
	 	createTag($sr.getSampleManager(),5,cases);
	 	retract($sr);
end
	
rule "galt"
	when 
		$sr : ScannerRecord (isGalt(getTest()), isPositive(getInterpratation()))
	then 
	 	createTag($sr.getSampleManager(),6,cases);
	 	retract($sr);
end

rule "tsh"
	when 
		$sr : ScannerRecord(isTsh(getTest()), isPositive(getInterpratation()))
	then
		createTag($sr.getSampleManager(),7,cases);
		retract($sr);
end

rule "tms"
	when 
		$sr : ScannerRecord (isTms(getTest()), isPositive(getInterpratation()))
	then
		createTag($sr.getSampleManager(),8,cases);
		retract($sr);
end

rule "irt"
	when 
		$sr : ScannerRecord (isIrt(getTest()), isPositive(getInterpratation()))
	then
		createTag($sr.getSampleManager(),9,cases);
		retract($sr);
end

function void createTag(SampleManager1 sm, Integer tag,HashMap cases) {
	CaseManager cm = CaseFactory.getCase(sm,cases);
	CaseManagerAccessor.addTag(cm,CaseFactory.createCaseTag(tag));
}

function boolean isCah(TestDO test) {
	return test != null && test.getName().equals("nbs cah");
}

function boolean isBt(TestDO test) {
	return test != null && test.getName().equals("nbs bt");
}
	
function boolean isHb(TestDO test) {
	return test != null && test.getName().equals("nbs hb");
}

function boolean isCFTR(TestDO test) {
	return test != null && test.getName().equals("nbs cftr");
}

function boolean isGalt(TestDO test) {
	return test != null && test.getName().equals("nbs galt");
}

function boolean isTsh(TestDO test) {
	return test != null && test.getName().equals("nbs tsh");
}

function boolean isTms(TestDO test) {
	return test != null && test.getName().equals("nbs tms");
}

function boolean isIrt(TestDO test) {
	return test != null && test.getName().equals("nbs irt");
}

function boolean isTransfused(SampleManager1 sm) {
	return "Y".equals(sm.getSampleNeonatal().getIsTransfused());
}

function boolean isPositive(DictionaryDO interpratation) {
	return interpratation.getSystemName().equals("newborn_inter_pp_nr");
}

function boolean isPoorQuality(SampleManager1 sm) {
    
	if (sm.qaEvent.hasType(Constants.dictionary().QAEVENT_WARNING)) {
	    return true;
	}
	
	if (SampleManager1Accessor.getAnalyses(sm) != null) {
		for (AnalysisDO analysis : SampleManager1Accessor.getAnalyses(sm)) {
			if(sm.qaEvent.hasType(analysis, Constants.dictionary().QAEVENT_WARNING)) {
		    	return true;
			}
		}
	}
	
	return false;
}

function boolean isEarlyCollection(SampleManager1 sm) {
	return !"Y".equals(sm.getSampleNeonatal().getIsCollectionValid());
}

function boolean isUnknownWeight(SampleManager1 sm) {
    return sm.getSampleNeonatal().getWeight() == null;
}